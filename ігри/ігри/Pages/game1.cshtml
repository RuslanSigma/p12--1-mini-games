@page
@model ігри.Pages.game1Model
@{
    ViewData["2048"] = "2048";
}
<link rel="stylesheet" href="../Pages/game1.cshtml.css">
    <div class="game-container">
        <div id="board">
        </div>
    </div>
    <script src="script.js"></script>
    <script>

        const boardSize = 4;
        let board = [];

        function createBoard() {
            board = [];
            for (let i = 0; i < boardSize; i++) {
                board.push(Array(boardSize).fill(0));
            }
            addNewTile();
            addNewTile();
            updateBoard();
        }

        function addNewTile() {
            let emptyTiles = [];
            for (let row = 0; row < boardSize; row++) {
                for (let col = 0; col < boardSize; col++) {
                    if (board[row][col] === 0) {
                        emptyTiles.push({ row, col });
                    }
                }
            }

            if (emptyTiles.length > 0) {
                let { row, col } = emptyTiles[Math.floor(Math.random() * emptyTiles.length)];
                board[row][col] = Math.random() < 0.9 ? 2 : 4;
                updateBoard();
            }
        }

        function updateBoard() {
            const boardElement = document.getElementById('board');
            boardElement.innerHTML = '';
            for (let row = 0; row < boardSize; row++) {
                for (let col = 0; col < boardSize; col++) {
                    const tileValue = board[row][col];
                    const tileElement = document.createElement('div');
                    tileElement.classList.add('tile');
                    tileElement.dataset.value = tileValue;
                    tileElement.textContent = tileValue > 0 ? tileValue : '';
                    boardElement.appendChild(tileElement);
                }
            }
        }

        function slideRowLeft(row) {
            let arr = row.filter(val => val);
            let missing = boardSize - arr.length;
            let zeros = Array(missing).fill(0);
            arr = arr.concat(zeros);

            for (let i = 0; i < boardSize - 1; i++) {
                if (arr[i] === arr[i + 1] && arr[i] !== 0) {
                    arr[i] *= 2;
                    arr[i + 1] = 0;
                }
            }

            arr = arr.filter(val => val);
            missing = boardSize - arr.length;
            zeros = Array(missing).fill(0);
            arr = arr.concat(zeros);

            return arr;
        }

        function slideLeft() {
            const tiles = document.querySelectorAll('.tile');
            tiles.forEach(tile => tile.classList.remove('move', 'move-right', 'move-left', 'move-up', 'move-down'));

            for (let i = 0; i < boardSize; i++) {
                board[i] = slideRowLeft(board[i]);
            }
            addNewTile();
            updateBoard();
        }

        function rotateBoard() {
            let newBoard = [];
            for (let col = 0; col < boardSize; col++) {
                newBoard.push([]);
                for (let row = boardSize - 1; row >= 0; row--) {
                    newBoard[col].push(board[row][col]);
                }
            }
            board = newBoard;
        }

        function slideRight() {
            rotateBoard();
            rotateBoard();
            slideLeft();
            rotateBoard();
            rotateBoard();
            updateBoard();
        }

        function slideUp() {
            rotateBoard();
            rotateBoard();
            rotateBoard();
            slideLeft();
            rotateBoard();
            updateBoard();
        }

        function slideDown() {
            rotateBoard();
            slideLeft();
            rotateBoard();
            rotateBoard();
            rotateBoard();
            updateBoard();
        }

        function applyTileAnimations(direction) {
            const tiles = document.querySelectorAll('.tile');
            tiles.forEach(tile => {
                tile.classList.add('move', `move-${direction}`);
            });

            setTimeout(() => {
                tiles.forEach(tile => {
                    tile.classList.remove('move', `move-${direction}`);
                });
            }, 200);
        }

        document.addEventListener('keydown', event => {
            switch (event.key) {
                case 'ArrowLeft':
                    slideLeft();
                    applyTileAnimations('left');
                    break;
                case 'ArrowRight':
                    slideRight();
                    applyTileAnimations('right');
                    break;
                case 'ArrowUp':
                    slideUp();
                    applyTileAnimations('up');
                    break;
                case 'ArrowDown':
                    slideDown();
                    applyTileAnimations('down');
                    break;
            }
            if (checkGameOver()) {
                alert('Game Over!');
            }
        });

        function checkGameOver() {
            for (let row = 0; row < boardSize; row++) {
                for (let col = 0; col < boardSize; col++) {
                    if (board[row][col] === 0) return false;
                    if (col !== boardSize - 1 && board[row][col] === board[row][col + 1]) return false;
                    if (row !== boardSize - 1 && board[row][col] === board[row + 1][col]) return false;
                }
            }
            return true;
        }

        createBoard();
    </script>
